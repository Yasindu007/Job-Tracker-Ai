import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { JobPostingPrep } from '@/types'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { jobPostingText, prepResults }: { jobPostingText: string; prepResults: JobPostingPrep } = await request.json()

    // Generate preparation guide text
    const guideText = `JOB PREPARATION GUIDE
Generated on: ${new Date().toLocaleDateString()}

JOB POSTING:
${jobPostingText}

========================================

RESUME CUSTOMIZATION TIPS:
${prepResults.resumeSuggestions.map((tip, index) => `${index + 1}. ${tip}`).join('\n')}

========================================

LIKELY INTERVIEW QUESTIONS:
${prepResults.interviewQuestions.map((question, index) => `${index + 1}. ${question}`).join('\n')}

========================================

SKILL GAPS TO ADDRESS:
${prepResults.skillGaps.map((gap, index) => `${index + 1}. ${gap}`).join('\n')}

========================================

LEARNING RESOURCES:
${prepResults.resources.map((resource, index) => `${index + 1}. ${resource}`).join('\n')}

========================================

Good luck with your application!
Generated by JobTracker AI
`

    return new NextResponse(guideText, {
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': 'attachment; filename="job_preparation_guide.txt"',
      },
    })
  } catch (error) {
    console.error('Error generating preparation guide:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
