import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/stack'
import { JobPostingPrep } from '@/types'
import { jsPDF } from 'jspdf'

export async function POST(request: NextRequest) {
  try {
    const user = await auth.getUser()
    
    if (!user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { jobPostingText, prepResults }: { jobPostingText: string; prepResults: JobPostingPrep } = await request.json()

    // Generate preparation guide text
    const guideText = `JOB PREPARATION GUIDE
Generated on: ${new Date().toLocaleDateString()}

JOB POSTING:
${jobPostingText}

========================================

RESUME CUSTOMIZATION TIPS:
${prepResults.resumeSuggestions.map((tip, index) => `${index + 1}. ${tip}`).join('\n')}

========================================

LIKELY INTERVIEW QUESTIONS:
${prepResults.interviewQuestions.map((question, index) => `${index + 1}. ${question}`).join('\n')}

========================================

SKILL GAPS TO ADDRESS:
${prepResults.skillGaps.map((gap, index) => `${index + 1}. ${gap}`).join('\n')}

========================================

LEARNING RESOURCES:
${prepResults.resources.map((resource, index) => `${index + 1}. ${resource}`).join('\n')}

========================================

Good luck with your application!
Generated by JobTracker AI
`

    // Create PDF
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    const maxWidth = pageWidth - (margin * 2)
    
    // Split text into lines that fit the page width
    const lines = pdf.splitTextToSize(guideText, maxWidth)
    
    let y = margin
    const lineHeight = 7
    
    for (const line of lines) {
      if (y + lineHeight > pageHeight - margin) {
        pdf.addPage()
        y = margin
      }
      pdf.text(line, margin, y)
      y += lineHeight
    }

    // Generate PDF buffer
    const pdfBuffer = Buffer.from(pdf.output('arraybuffer'))

    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="job_preparation_guide.pdf"',
      },
    })
  } catch (error) {
    console.error('Error generating preparation guide:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}